version: '3.8'

services:
  # Banco de Dados MongoDB
  mongodb:
    image: mongo:6.0
    container_name: ci-connect-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-ci-connect}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - ci-connect-network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: ci-connect-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ci-connect-network

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: ci-connect-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:password@mongodb:27017/ci-connect?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      AI_SERVICE_URL: http://ai-services:8000
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ../backend:/app
      - /app/node_modules
    networks:
      - ci-connect-network

  # Serviços de IA
  ai-services:
    build:
      context: ../ai-services
      dockerfile: ../docker/Dockerfile.ai-services
    container_name: ci-connect-ai
    restart: unless-stopped
    environment:
      MONGODB_URI: mongodb://admin:password@mongodb:27017/ci-connect?authSource=admin
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${AI_SECRET_KEY}
    ports:
      - "8000:8000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ../ai-services:/app
    networks:
      - ci-connect-network

  # Frontend React
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: ci-connect-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000}
      REACT_APP_AI_API_URL: ${REACT_APP_AI_API_URL:-http://localhost:8000}
    networks:
      - ci-connect-network

  # Nginx Reverse Proxy (Produção)
  nginx:
    image: nginx:alpine
    container_name: ci-connect-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - ai-services
    networks:
      - ci-connect-network
    profiles:
      - production

  # Monitoramento com Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ci-connect-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ci-connect-network
    profiles:
      - monitoring

  # Grafana para visualização
  grafana:
    image: grafana/grafana:latest
    container_name: ci-connect-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ci-connect-network
    profiles:
      - monitoring

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ci-connect-network:
    driver: bridge
